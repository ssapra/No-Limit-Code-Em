Player model- Name = params[:name]- hand = []- bet = 0- stack = 500- action = nil- in_game = true- in_round = true- turn = false (need to remove)- table_idTable model- game_id ?- deck :text- pot :integer
- turn_id :integer (need to add)Status Model- registration- game- playServer logic- registration status default false- admin sets registration as trueo students who ping will now be validated, assigned a player key, and savedo player_key returned to studento registered players who continue to ping will receive message = You already registered.- Admin turns registration offo New students who ping now will not be accepted* Message = Registration has closed.o Registered players who ping now will receive message = Registration is now closed. Play will begin in a moment- Admin sets game as true o Tables created and players assigned to tableso Registered players who ping now will received message = You have been placed at table <%= table.id %> with 9 other players. The game will begin in a moment- Admin sets play as trueo While(play == true)* Table deals cards to the players who are still in game* Checks if player is playing the round and sets player.turn as true, so when this player pings, player receives * hand, current stack, current table bet, minimum to check, pot* prompted for action (check, bet amount, or fold)o action received and interpreted* player bet, player stack, pot change accordingly. Action set as (check/bet)o action received, but unintelligible* player.in_round set as false (folds)o action not received* player.in_round set as false (folds)* when table is ready to replace cards, players still in the round are given* hand* prompted for which cards to replace if anyo response received and interpreted* hand replacedo response received and unintelligible* player.in_round set as false (folds)o response not received* player.in_round set as false (folds)* repeat betting* checks for winner* table stores important information for that round* table checks if any players have 0 chips* if yes, player.in_game set as false. This player will receive the message = “You have lost” for all future pings* table resets bets, pot, deck* - Admin sets play as falseo Table stops play at the end of a round- Admin shuffles players at nearly empty table to other tables- Admin sets play as true and keep goingOutline of Tasks1. Handle requests from player2. Allow player to sign up and initialize the stack3. Create server states (registration and play) and allow toggling4. Create table model and allow tables to be created when game is set to truea. Initialize tables to set pot as 0, create deck5. Assign 10 players at a time to a table6. Toggle play to be true7. Write poker logic to deal cards to players and begin betting8. Handle requests from player at this stage, considering if they are still in the game, in the round, and if its their turnOutline of typical requests1. Player pings us with name, game_id and player_keya. If player is valid, check if player is still in gamei. If true, check if he is still in the round1. If true, check if it’s his turna. If true, respond with everything and wait for responsei. Table.find_by_id(player.game_id)b. Else, “not your turn yet”2. Else, “you folded”ii. Else,   “you are out”b. Else, no response	